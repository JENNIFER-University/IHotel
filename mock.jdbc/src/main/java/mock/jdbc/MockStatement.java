package mock.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;


/**
 * Created by khalid on 9/7/16.
 */
public class MockStatement implements Statement{

	private Connection connection;
	private boolean closed = false;
	private int totalRows = 100;
	
	public MockStatement(Connection connection){
		this.connection = connection;
	}
	
	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return null;
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return false;
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		System.out.println("MOCK Query ????");
		MockUtil.sleep();
		return new MockResultSet(this);
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		MockUtil.sleep();
		return MockUtil.getRandom(1000, 2000);
	}

	@Override
	public void close() throws SQLException {
		this.closed = true;
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return 255;
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {}

	@Override
	public int getMaxRows() throws SQLException {
		return this.totalRows;
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		this.totalRows = max;
		
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {}

	@Override
	public int getQueryTimeout() throws SQLException {
		return 0;
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {}

	@Override
	public void cancel() throws SQLException {}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	@Override
	public void clearWarnings() throws SQLException {}

	@Override
	public void setCursorName(String name) throws SQLException {}

	@Override
	public boolean execute(String sql) throws SQLException {
		MockUtil.sleep();
		return true;
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return new MockResultSet(this);
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return 1000;
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return false;
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {}

	@Override
	public int getFetchDirection() throws SQLException {
		return 1000;
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		this.totalRows = rows;		
	}

	@Override
	public int getFetchSize() throws SQLException {
		return this.totalRows;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return 0;
	}

	@Override
	public int getResultSetType() throws SQLException {
		return 0;
	}

	@Override
	public void addBatch(String sql) throws SQLException {}

	@Override
	public void clearBatch() throws SQLException {}

	@Override
	public int[] executeBatch() throws SQLException {
		MockUtil.sleep();
		return new int[]{100};
	}

	@Override
	public Connection getConnection() throws SQLException {
		return this.connection;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return false;
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return new MockResultSet(this);
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		MockUtil.sleep();
		return MockUtil.getRandom(1000, 2000);
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		MockUtil.sleep();
		return MockUtil.getRandom(1000, 2000);
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		MockUtil.sleep();
		return MockUtil.getRandom(1000, 2000);
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		MockUtil.sleep();
		return true;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		MockUtil.sleep();
		return true;
	}

	@Override
	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		MockUtil.sleep();
		return true;
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return 0;
	}

	@Override
	public boolean isClosed() throws SQLException {
		return this.closed;
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return false;
	}

	public void closeOnCompletion() throws SQLException {}

	public boolean isCloseOnCompletion() throws SQLException {return false;}

}
